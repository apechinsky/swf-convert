plugins {
    id "kotlin"
    id "kotlin-kapt"
}

dependencies {
    implementation project(":core")
    implementation project(":convert")

    implementation project(":render:core")
    implementation project(":render:ir")
    implementation project(":render:pdf")
    implementation project(":render:svg")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"

    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-api-kotlin:$log4jKotlinVersion"

    compileOnly "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    implementation "com.beust:jcommander:$jcommanderVersion"

    implementation "com.mortennobel:java-image-scaling:$scalingLibVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
}

sourceSets {
    main {
        java.srcDirs += "src/main/kotlin"
        resources.srcDirs += "src/main/res"
    }
    test {
        java.srcDirs += "src/test/kotlin"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

def mainClassName = "com.maltaisn.swfconvert.app.MainKt"
task run(type: JavaExec) {
    dependsOn "updateVersionRes"

    main = mainClassName
    classpath = files(sourceSets.main.runtimeClasspath, sourceSets.main.resources)
    standardInput = System.in
    setIgnoreExitValue(true)

    // Get program test arguments defined in local.properties.
    def propFile = project.rootProject.file("local.properties")
    if (propFile.exists()) {
        def properties = new Properties()
        properties.load(propFile.newInputStream())
        workingDir properties.getProperty("app-test-working-dir")
        argsString properties.getProperty("app-test-args")
    }

    if ("mac" in System.getProperty("os.name").toLowerCase()) {
        jvmArgs "-XstartOnFirstThread"
    }
}

task dist(type: Jar) {
    dependsOn "updateVersionRes"

    from(files(sourceSets.main.output.classesDirs))
    from(files(sourceSets.main.resources.srcDirs))
    from(configurations.runtimeClasspath.collect { if (it.directory) it else zipTree(it) })
    archiveBaseName.set("swf-convert")

    manifest {
        attributes["Main-Class"] = mainClassName
    }
}

tasks.register("updateVersionRes") {
    doLast {
        def versionResFile = file("src/main/res/version.txt")
        versionResFile.write(appVersion)
    }
}
